"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5975],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return c}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),m=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=m(r),c=o,k=p["".concat(s,".").concat(c)]||p[c]||d[c]||a;return r?n.createElement(k,l(l({ref:t},u),{},{components:r})):n.createElement(k,l({ref:t},u))}));function c(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var m=2;m<a;m++)l[m]=r[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8381:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return d}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),l=["components"],i={title:"Submarine Client"},s=void 0,m={unversionedId:"userDocs/submarine-sdk/submarine-client",id:"userDocs/submarine-sdk/submarine-client",title:"Submarine Client",description:"\x3c!--",source:"@site/docs/userDocs/submarine-sdk/submarine-client.md",sourceDirName:"userDocs/submarine-sdk",slug:"/userDocs/submarine-sdk/submarine-client",permalink:"/docs/next/userDocs/submarine-sdk/submarine-client",editUrl:"https://github.com/apache/submarine/edit/master/website/docs/userDocs/submarine-sdk/submarine-client.md",tags:[],version:"current",frontMatter:{title:"Submarine Client"},sidebar:"docs",previous:{title:"Tracking",permalink:"/docs/next/userDocs/submarine-sdk/tracking"},next:{title:"MLflow UI",permalink:"/docs/next/userDocs/others/mlflow"}},u={},d=[{value:"class SubmarineClient()",id:"class-submarineclient",level:2},{value:"<code>log_metric(job_id: str, key: str, value: float, worker_index: str, timestamp: datetime = None, step: int = None) -&gt; None</code>",id:"log_metricjob_id-str-key-str-value-float-worker_index-str-timestamp-datetime--none-step-int--none---none",level:3},{value:"<code>log_param(job_id: str, key: str, value: str, worker_index: str) -&gt; None</code>",id:"log_paramjob_id-str-key-str-value-str-worker_index-str---none",level:3},{value:"<code>save_model(model, model_type: str, registered_model_name: str = None, input_dim: list = None, output_dim: list = None) -&gt; None</code>",id:"save_modelmodel-model_type-str-registered_model_name-str--none-input_dim-list--none-output_dim-list--none---none",level:3},{value:"<code>create_serve(self, model_name: str, model_version: int, async_req: bool = True)</code>",id:"create_serveself-model_name-str-model_version-int-async_req-bool--true",level:3},{value:"<code>delete_serve(self, model_name: str, model_version: int, async_req: bool = True)</code>",id:"delete_serveself-model_name-str-model_version-int-async_req-bool--true",level:3}],p={toc:d};function c(e){var t=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"class-submarineclient"},"class SubmarineClient()"),(0,a.kt)("p",null,"Client of submarine to log metric/param, save model and create/delete serve."),(0,a.kt)("h3",{id:"log_metricjob_id-str-key-str-value-float-worker_index-str-timestamp-datetime--none-step-int--none---none"},(0,a.kt)("inlineCode",{parentName:"h3"},"log_metric(job_id: str, key: str, value: float, worker_index: str, timestamp: datetime = None, step: int = None) -> None")),(0,a.kt)("p",null,"Log a single key-value metric with job id and worker index. The value must always be a number."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"job_id"),": The job name to which the metric should be logged."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"key")," - Metric name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"value")," - Metric value."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"worker_index")," - Metric worker_index."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"timestamp")," - Time when this metric was calculated. Defaults to the current system time."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"step")," - A single integer step at which to log the specified Metrics, by default it's 0."))),(0,a.kt)("h3",{id:"log_paramjob_id-str-key-str-value-str-worker_index-str---none"},(0,a.kt)("inlineCode",{parentName:"h3"},"log_param(job_id: str, key: str, value: str, worker_index: str) -> None")),(0,a.kt)("p",null,"Log a single key-value parameter with job id and worker index. The key and value are both strings."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"job_id")," - The job name to which the parameter should be logged."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"key")," - Parameter name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"value")," - Parameter value."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"worker_index")," - Parameter worker_index."))),(0,a.kt)("h3",{id:"save_modelmodel-model_type-str-registered_model_name-str--none-input_dim-list--none-output_dim-list--none---none"},(0,a.kt)("inlineCode",{parentName:"h3"},"save_model(model, model_type: str, registered_model_name: str = None, input_dim: list = None, output_dim: list = None) -> None")),(0,a.kt)("p",null,"Save a model into the minio pod."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"model")," - Model artifact."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"model_type")," - The type of model. Only support ",(0,a.kt)("inlineCode",{parentName:"li"},"pytorch")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"tensorflow"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"registered_model_name")," - If it is not ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),", the model will be registered into the model registry with this name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"input_dim")," - The input dimension of the model."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"output_dim")," - The output dimension of the model."))),(0,a.kt)("h3",{id:"create_serveself-model_name-str-model_version-int-async_req-bool--true"},(0,a.kt)("inlineCode",{parentName:"h3"},"create_serve(self, model_name: str, model_version: int, async_req: bool = True)")),(0,a.kt)("p",null,"Create serve of a model through Seldon Core."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"model_name")," - Name of a registered model"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"model_version"),": Version of a registered model"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"async_req")," - Execute request asynchronously"))),(0,a.kt)("h3",{id:"delete_serveself-model_name-str-model_version-int-async_req-bool--true"},(0,a.kt)("inlineCode",{parentName:"h3"},"delete_serve(self, model_name: str, model_version: int, async_req: bool = True)")),(0,a.kt)("p",null,"Delete a serving model."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"model_name")," - Name of a registered model"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"model_version"),": Version of a registered model"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"async_req")," - Execute request asynchronously"))))}c.isMDXComponent=!0}}]);
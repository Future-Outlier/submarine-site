(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{206:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return u}));var r=a(0),n=a.n(r);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=n.a.createContext({}),b=function(e){var t=n.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=b(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},h=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=b(a),h=r,u=m["".concat(i,".").concat(h)]||m[h]||l[h]||o;return a?n.a.createElement(u,s(s({ref:t},p),{},{components:a})):n.a.createElement(u,s({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"},88:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return b}));var r=a(3),n=a(7),o=(a(0),a(206)),i={title:"Bylaws"},s={unversionedId:"community/Bylaws",id:"community/Bylaws",isDocsHomePage:!1,title:"Bylaws",description:"\x3c!--",source:"@site/docs/community/Bylaws.md",slug:"/community/Bylaws",permalink:"/docs/next/community/Bylaws",editUrl:"https://github.com/apache/submarine/edit/master/website/docs/community/Bylaws.md",version:"current",sidebar:"docs",previous:{title:"How to Run Frontend Integration Test",permalink:"/docs/next/devDocs/IntegrationTestE2E"},next:{title:"Apache Submarine Community",permalink:"/docs/next/community/README"}},c=[],p={toc:c};function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This document defines the bylaws under which the Apache Submarine project operates. It defines the roles and responsibilities of the project, who may vote, how voting works, how conflicts are resolved, etc."),Object(o.b)("p",null,"Submarine is a project of the ",Object(o.b)("a",{parentName:"p",href:"https://www.apache.org/foundation/"},"Apache Software Foundation"),". The foundation holds the trademark on the name \u201cSubmarine\u201d and copyright on Apache code including the code in the Submarine codebase. The ",Object(o.b)("a",{parentName:"p",href:"https://www.apache.org/foundation/faq.html"},"foundation FAQ")," explains the operation and background of the foundation."),Object(o.b)("p",null,"Submarine is typical of Apache projects in that it operates under a set of principles, known collectively as the \u201cApache Way\u201d. If you are new to Apache development, please refer to the ",Object(o.b)("a",{parentName:"p",href:"http://incubator.apache.org"},"Incubator project")," for more information on how Apache projects operate."),Object(o.b)("h1",{id:"roles-and-responsibilities"},"Roles and Responsibilities"),Object(o.b)("p",null,"Apache projects define a set of roles with associated rights and responsibilities. These roles govern what tasks an individual may perform within the project. The roles are defined in the following sections"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Users")),Object(o.b)("p",{parentName:"li"},"The most important participants in the project are people who use our software. The majority of our developers start out as users and guide their development efforts from the user\u2019s perspective."),Object(o.b)("p",{parentName:"li"},"Users contribute to the Apache projects by providing feedback to developers in the form of bug reports and feature suggestions. As well, users participate in the Apache community by helping other users on mailing lists and user support forums.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Contributors")),Object(o.b)("p",{parentName:"li"},"All of the volunteers who are contributing time, code, documentation, or resources to the Submarine Project. A contributor that makes sustained, welcome contributions to the project may be invited to become a Committer, though the exact timing of such invitations depends on many factors.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Committers")),Object(o.b)("p",{parentName:"li"},"The project\u2019s Committers are responsible for the project\u2019s technical management. Committers have access to all subproject subversion repositories. Committers may cast binding votes on any technical discussion regarding any subproject."),Object(o.b)("p",{parentName:"li"},"Committer access is by invitation only and must be approved by consensus approval of the active PMC members. A Committer is considered emeritus by their own declaration or by not contributing in any form to the project for over six months. An emeritus committer may request reinstatement of commit access from the PMC. Such reinstatement is subject to consensus approval of active PMC members."),Object(o.b)("p",{parentName:"li"},"Significant, pervasive features are often developed in a speculative branch of the repository. The PMC may grant commit rights on the branch to its consistent contributors, while the initiative is active. Branch committers are responsible for shepherding their feature into an active release and do not cast binding votes or vetoes in the project."),Object(o.b)("p",{parentName:"li"},"All Apache committers are required to have a signed Contributor License Agreement (CLA) on file with the Apache Software Foundation. There is a ",Object(o.b)("a",{parentName:"p",href:"https://www.apache.org/dev/committers.html"},"Committer FAQ")," which provides more details on the requirements for Committers"),Object(o.b)("p",{parentName:"li"},"A committer who makes a sustained contribution to the project may be invited to become a member of the PMC. The form of contribution is not limited to code. It can also include code review, helping out users on the mailing lists, documentation, testing, etc.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Release Manager")),Object(o.b)("p",{parentName:"li"},"A Release Manager (RM) is a committer who volunteers to produce a Release Candidate according to ",Object(o.b)("a",{parentName:"p",href:"https://github.com/apache/submarine/blob/master/dev-support/cicd/HowToRelease.md"},"HowToRelease"),". The RM shall publish a Release Plan on the ",Object(o.b)("em",{parentName:"p"},"common-dev@")," list stating the branch from which they intend to make a Release Candidate, at least one week before they do so. The RM is responsible for building consensus around the content of the Release Candidate, in order to achieve a successful Product Release vote.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Project Management Committee")),Object(o.b)("p",{parentName:"li"},"The Project Management Committee (PMC) for Apache Submarine was created by the Apache Board in October 2019 when Submarine moved out of Hadoop and became a top level project at Apache. The PMC is responsible to the board and the ASF for the management and oversight of the Apache Submarine codebase. The responsibilities of the PMC include"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Deciding what is distributed as products of the Apache Submarine project. In particular all releases must be approved by the PMC"),Object(o.b)("li",{parentName:"ul"},"Maintaining the project\u2019s shared resources, including the codebase repository, mailing lists, websites."),Object(o.b)("li",{parentName:"ul"},"Speaking on behalf of the project."),Object(o.b)("li",{parentName:"ul"},"Resolving license disputes regarding products of the project"),Object(o.b)("li",{parentName:"ul"},"Nominating new PMC members and committers"),Object(o.b)("li",{parentName:"ul"},"Maintaining these bylaws and other guidelines of the project")),Object(o.b)("p",{parentName:"li"},"Membership of the PMC is by invitation only and must be approved by a consensus approval of active PMC members. A PMC member is considered \u201cemeritus\u201d by their own declaration or by not contributing in any form to the project for over six months. An emeritus member may request reinstatement to the PMC. Such reinstatement is subject to consensus approval of the active PMC members."),Object(o.b)("p",{parentName:"li"},"The chair of the PMC is appointed by the ASF board. The chair is an office holder of the Apache Software Foundation (Vice President, Apache Submarine) and has primary responsibility to the board for the management of the projects within the scope of the Submarine PMC. The chair reports to the board quarterly on developments within the Submarine project."),Object(o.b)("p",{parentName:"li"},"The chair of the PMC is rotated annually. When the chair is rotated or if the current chair of the PMC resigns, the PMC votes to recommend a new chair using Single Transferable Vote (STV) voting. See ",Object(o.b)("a",{parentName:"p",href:"https://wiki.apache.org/general/BoardVoting"},"https://wiki.apache.org/general/BoardVoting")," for specifics. The decision must be ratified by the Apache board."))),Object(o.b)("h1",{id:"decision-making"},"Decision Making"),Object(o.b)("p",null,"Within the Submarine project, different types of decisions require different forms of approval. For example, the previous section describes several decisions which require \u201cconsensus approval\u201d approval. This section defines how voting is performed, the types of approvals, and which types of decision require which type of approval."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Voting")),Object(o.b)("p",{parentName:"li"},"Decisions regarding the project are made by votes on the primary project development mailing list (",Object(o.b)("a",{parentName:"p",href:"mailto:dev@submarine.apache.org"},"dev@submarine.apache.org"),"). Where necessary, PMC voting may take place on the private Submarine PMC mailing list. Votes are clearly indicated by subject line starting with ","[","VOTE","]",". Votes may contain multiple items for approval and these should be clearly separated. Voting is carried out by replying to the vote mail. Voting may take four flavors"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"+1")," \u201cYes,\u201d \u201cAgree,\u201d or \u201cthe action should be performed.\u201d In general, this vote also indicates a willingness on the behalf of the voter in \u201cmaking it happen\u201d"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"+0")," This vote indicates a willingness for the action under consideration to go ahead. The voter, however will not be able to help."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"-","0")," This vote indicates that the voter does not, in general, agree with the proposed action but is not concerned enough to prevent the action going ahead."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"-","1")," This is a negative vote. On issues where consensus is required, this vote counts as a ",Object(o.b)("strong",{parentName:"li"},"veto"),". All vetoes must contain an explanation of why the veto is appropriate. Vetoes with no explanation are void. It may also be appropriate for a -1 vote to include an alternative course of action.")),Object(o.b)("p",{parentName:"li"},"All participants in the Submarine project are encouraged to show their agreement with or against a particular action by voting. For technical decisions, only the votes of active committers are binding. Non binding votes are still useful for those with binding votes to understand the perception of an action in the wider Submarine community. For PMC decisions, only the votes of PMC members are binding."),Object(o.b)("p",{parentName:"li"},"Voting can also be applied to changes made to the Submarine codebase. These typically take the form of a veto (-1) in reply to the commit message sent when the commit is made.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Approvals")),Object(o.b)("p",{parentName:"li"},"These are the types of approvals that can be sought. Different actions require different types of approvals"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Consensus Approval -")," Consensus approval requires 3 binding +1 votes and no binding vetoes."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Lazy Consensus -")," Lazy consensus requires no -1 votes (\u2018silence gives assent\u2019)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Lazy Majority -")," A lazy majority vote requires 3 binding +1 votes and more binding +1 votes than -1 votes."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Lazy 2\u20443 Majority -")," Lazy 2\u20443 majority votes requires at least 3 votes and twice as many +1 votes as -1 votes."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Vetoes")),Object(o.b)("p",{parentName:"li"},"A valid, binding veto cannot be overruled. If a veto is cast, it must be accompanied by a valid reason explaining the reasons for the veto. The validity of a veto, if challenged, can be confirmed by anyone who has a binding vote. This does not necessarily signify agreement with the veto - merely that the veto is valid."),Object(o.b)("p",{parentName:"li"},"If you disagree with a valid veto, you must lobby the person casting the veto to withdraw their veto. If a veto is not withdrawn, any action that has been vetoed must be reversed in a timely manner.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Actions")),Object(o.b)("p",{parentName:"li"},"This section describes the various actions which are undertaken within the project, the corresponding approval required for that action and those who have binding votes over the action."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Code Change")),Object(o.b)("p",{parentName:"li"},"A change made to a codebase of the project and committed by a committer. This includes source code, documentation, website content, etc."),Object(o.b)("p",{parentName:"li"},"Consensus approval of active committers, but with a minimum of one +1. The code can be committed after the first +1, unless the code change represents a merge from a branch, in which case three +1s are required.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Product Release")),Object(o.b)("p",{parentName:"li"},"When a release of one of the project\u2019s products is ready, a vote is required to accept the release as an official release of the project."),Object(o.b)("p",{parentName:"li"},"Lazy Majority of active PMC members")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Adoption of New Codebase")),Object(o.b)("p",{parentName:"li"},"When the codebase for an existing, released product is to be replaced with an alternative codebase. If such a vote fails to gain approval, the existing code base will continue."),Object(o.b)("p",{parentName:"li"},"This also covers the creation of new sub-projects within the project"),Object(o.b)("p",{parentName:"li"},"Lazy 2\u20443 majority of PMC members")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"New Branch Committer")),Object(o.b)("p",{parentName:"li"},"When a branch committer is proposed for the PMC"),Object(o.b)("p",{parentName:"li"},"Lazy consensus of active PMC members")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"New Committer")),Object(o.b)("p",{parentName:"li"},"When a new committer is proposed for the project"),Object(o.b)("p",{parentName:"li"},"Consensus approval of active PMC members")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"New PMC Member")),Object(o.b)("p",{parentName:"li"},"When a committer is proposed for the PMC"),Object(o.b)("p",{parentName:"li"},"Consensus approval of active PMC members")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Branch Committer Removal")),Object(o.b)("p",{parentName:"li"},"When removal of commit privileges is sought ",Object(o.b)("strong",{parentName:"p"},"or")," when the branch is merged to the mainline"),Object(o.b)("p",{parentName:"li"},"Lazy 2\u20443 majority of active PMC members")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Committer Removal")),Object(o.b)("p",{parentName:"li"},"When removal of commit privileges is sought. Note: Such actions will also be referred to the ASF board by the PMC chair"),Object(o.b)("p",{parentName:"li"},"Lazy 2\u20443 majority of active PMC members (excluding the committer in question if a member of the PMC).")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"PMC Member Removal")),Object(o.b)("p",{parentName:"li"},"When removal of a PMC member is sought. Note: Such actions will also be referred to the ASF board by the PMC chair."),Object(o.b)("p",{parentName:"li"},"Lazy 2\u20443 majority of active PMC members (excluding the member in question)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Modifying Bylaws")),Object(o.b)("p",{parentName:"li"},"Modifying this document."),Object(o.b)("p",{parentName:"li"},"Lazy majority of active PMC members")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Voting Timeframes")),Object(o.b)("p",{parentName:"li"},"Votes are open for a period of 7 days to allow all active voters time to consider the vote. Votes relating to code changes are not subject to a strict timetable but should be made as timely as possible."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Product Release - Vote Timeframe")),Object(o.b)("p",{parentName:"li"},"Release votes, alone, run for a period of 5 days. All other votes are subject to the above timeframe of 7 days."))))))}b.isMDXComponent=!0}}]);